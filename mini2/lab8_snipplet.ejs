// Create function

create: function(req, res) {

 		if (req.method == "POST") {

 			Person.create(req.body.Person).exec( function(err, model) {

 				return res.send("Successfully Created!");

 			});
 		}

 		else {

 			return res.view('person/create');
 		}
 	},

// create.ejs

 <h2 class="col-sm-offset-1">Person Create form</h2>

<form action="/person/create" method="POST" class="form-horizontal">
	<div class="form-group">
		<label class="control-label col-sm-2">Name: </label>
		<div class="col-sm-8">
			<input class="form-control" name="Person[name]" type="text">
		</div>
	</div>

	<div class="form-group">ac
		<label class="control-label col-sm-2">Age: </label>
		<div class="col-sm-8">
			<input class="form-control" name="Person[age]" type="number" min="0" max="120">
		</div>
	</div>

	<button class="btn btn-default col-sm-offset-2" type="submit" value="ADD">Submit</button>
</form>

// json function

json: function(req, res) {

 		Person.find().exec( function(err, persons) {

 			return res.json(persons);

 		});
 	},

 // index function

 index: function(req, res) {

 		Person.find().exec( function(err, persons) {

 			return res.view('person/index', {'persons': persons});

 		});
 	},

 // index.ejs

 <table class="table"> 

	<% persons.forEach( function(model) { %>
		<tr><td><%=model.name%></td><td><%=model.age%></td></tr>
	<% }); %>
		
</table>

// view function

view: function (req, res) {

 		Person.findOne(req.params.id).exec( function(err, model) {

 			if (model != null)
 				return res.view('person/view', {'person': model});
 			else
 				return res.send("No such person");

 		});

 	},

 // delete function 
 
 delete: function(req, res) {

 		Person.findOne(req.params.id).exec( function(err, model) {

 			if (model != null) {
 				model.destroy();
 				return res.send("Person Deleted");
 			} else {		
 				return res.send("Person not found");
 			}

 		});

 	},

 // update function
 
 update: function(req, res) {

 		if (req.method == "GET") {

 			Person.findOne(req.params.id).exec( function(err, model) {

 				if (model == null) 
 					return res.send("No such person!");
 				else
 					return res.view('person/update', {'person': model});

 			});

 		} else {

 			Person.findOne(req.params.id).exec( function(err, model) {

 				model.name = req.body.Person.name;
 				model.age = req.body.Person.age;

 				model.save();
 				return res.send("Record updated");

 			});

 		}

 	},

 // update.ejs
 
 <h2>Person Create form</h2>

<form action="/person/update/<%=person.id%>" method="POST">
	<div>
		<label>Name</label>
		<input name="Person[name]" type="text" value="<%=person.name%>">
	</div>

	<div>
		<label>Age</label>
		<input name="Person[age]" type="text" value="<%=person.age%>">
	</div>

	<button type="submit" value="ADD">Update</button>
</form>

// search function

search: function (req, res) {

 		Person.find()
 			.where({name: {contains: req.query.name}})
 			.where({age: {contains: req.query.age}})
 			.sort('name')
 			.exec( function (err, persons) {

 				return res.view('person/index', {'persons': persons});

 			})

 	},

 // paginate function
 
 paginate: function (req, res) {

 		Person.find().paginate({page: req.query.page, limit: 2})
 			.exec( function(err, persons) {

      		Person.count().exec( function(err, value) {
      
        		var pages = Math.ceil(value / 2 );

        		return res.view( 'person/paginate', 
        			{'persons': persons, 'count':pages, 'current':req.query.page});
      
      		});

    	});

 	},

 // paginate.ejs
 
 <table> 

	<% persons.forEach( function(model) { %>
		<tr><td><%=model.name%></td><td><%=model.age%></td></tr>
	<% }); %>
		
</table>

<nav>
  <ul class="pagination">
    <!-- <li>
      <a href="/person/paginate/?page=<%=Math.max(current-1, 1)%>" aria-label="Previous">
        <span aria-hidden="true">&laquo;</span>
      </a>
    </li> -->

    <% for (i = 1; i <= count; i++) { %>
		<li><a href="/person/paginate/?page=<%=i%>"> <%=i%> </a></li>
	<%}%>
 
    <!-- <li>
      <a href="/person/paginate/?page=<%=Math.min(current*1+1, count)%>" aria-label="Next">
        <span aria-hidden="true">&raquo;</span>
      </a>
    </li> -->
  </ul>
</nav>

// createUniqueAge function

createUniqueAge: function(req, res) {

 		if (req.method == "POST") {

 			Person.count().where({age:req.body.Person.age}).exec( function(err, value) {

 				if (value != 0)

 					return res.send("Age taken");

 				else 

	 				Person.create(req.body.Person).exec( function(err, model) {

 						return res.send("Successfully Created!");

 					});
	 		});
 		}

 		else {

 			return res.view('person/createUniqueAge');
 		}
 	},

// Bootstrap 

<div class="container container-fluid">
	<div class="row">
	  <div class="col-xs-12 col-md-8">.col-xs-12 .col-md-8</div>
	  <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
	  <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
	  <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
	  <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
	  <div class="col-xs-6">.col-xs-6</div>
	  <div class="col-xs-6">.col-xs-6</div>
	</div>						
</div>

